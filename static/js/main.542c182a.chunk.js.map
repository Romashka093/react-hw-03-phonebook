{"version":3,"sources":["ui/button/Button.js","ui/input/Input.js","components/Phonebook/contactForm/ContactForm.js","components/Phonebook/contactList/listItem/ListItem.js","components/Phonebook/filter/Filter.js","components/Phonebook/contactList/ContactList.js","components/Phonebook/Phonebook.js","App.js","index.js"],"names":["Button","name","type","onClick","Input","titleNameInput","placeholder","value","onChange","id","required","htmlFor","initialState","number","ContactForm","state","handleChange","target","alert","setState","handleSubmit","evt","preventDefault","props","onAddContact","reset","this","onSubmit","Component","ListItem","console","log","onDeleteContact","Filter","onChangeFilter","ContactList","length","contacts","map","contact","key","contactId","shortid","generate","Phonebook","filter","addContact","contactToAdd","isUniqueName","forEach","includes","prevState","deleteContact","changeFilter","filterForContacts","toLowerCase","contactsInLocalStorage","localStorage","getItem","contactsInState","contactsState","JSON","parse","setItem","stringify","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.542c182a.chunk.js","sourcesContent":["import React from 'react';\n\nexport function Button({ name, type, onClick }) {\n  return (\n    <>\n      <button onClick={onClick} type={type}>\n        {name}\n      </button>\n    </>\n  );\n}\n","import React from 'react';\n\nexport function Input({\n  titleNameInput,\n  type,\n  placeholder,\n  value,\n  onChange,\n  name,\n  id,\n  required,\n}) {\n  return (\n    <>\n      <label htmlFor={id}>\n        {titleNameInput}\n        <input\n          type={type}\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n          name={name}\n          required={required}\n        />\n      </label>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Button } from '../../../ui/button/Button';\nimport { Input } from '../../../ui/input/Input';\n\nconst initialState = {\n  name: '',\n  number: '',\n};\n\nexport class ContactForm extends Component {\n  state = {\n    ...initialState,\n  };\n  handleChange = ({ target: { name, value } }) => {\n    if (name === value) {\n      return alert('NOT1');\n    }\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = evt => {\n    evt.preventDefault();\n    this.props.onAddContact({ ...this.state });\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      ...initialState,\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    const { id } = this.props;\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <form onSubmit={this.handleSubmit}>\n          <Input\n            name=\"name\"\n            onChange={this.handleChange}\n            titleNameInput=\"Name\"\n            type=\"text\"\n            placeholder=\"enter name\"\n            value={name}\n            id={id}\n            required\n          />\n          <Input\n            name=\"number\"\n            onChange={this.handleChange}\n            titleNameInput=\"Number\"\n            type=\"tel\"\n            placeholder=\"enter number\"\n            value={number}\n            id={id}\n            required\n          />\n          <br />\n          <Button name=\"Add contact\" type=\"submit\" />\n        </form>\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Button } from '../../../../ui/button/Button';\n\nexport class ListItem extends Component {\n  state = {};\n  componentWillUnmount() {\n    console.log('componentWillUnmount - just to see that is work');\n  }\n\n  render() {\n    const { name, number, onDeleteContact } = this.props;\n    return (\n      <>\n        <p>{name}</p>\n        <span>{number}</span>\n        <Button name=\"delete\" type=\"button\" onClick={onDeleteContact} />\n      </>\n    );\n  }\n}\n\n// export function ListItem({ name, number, onDeleteContact }) {\n//   return (\n// <>\n//   <p>{name}</p>\n//   <span>{number}</span>\n//   <Button name=\"delete\" type=\"button\" onClick={onDeleteContact} />\n// </>\n//   );\n// }\n","import React from 'react';\nimport { Input } from '../../../ui/input/Input';\n\nexport function Filter({ value, onChangeFilter }) {\n  return (\n    <>\n      <Input\n        value={value}\n        type=\"text\"\n        placeholder=\"enter contact name\"\n        onChange={onChangeFilter}\n        titleNameInput=\"Find contact by name:\"\n      />\n    </>\n  );\n}\n","import React from 'react';\nimport { ListItem } from './listItem/ListItem';\nimport { Filter } from '../filter/Filter';\n\nexport const ContactList = ({\n  length,\n  contacts,\n  onDeleteContact,\n  onChangeFilter,\n  value,\n}) => (\n  <>\n    <h2>Contacts:</h2>\n    {length > 0 && <Filter value={value} onChangeFilter={onChangeFilter} />}\n    <ul>\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          <ListItem\n            {...contact}\n            onDeleteContact={() => onDeleteContact(contact.id)}\n          />\n        </li>\n      ))}\n    </ul>\n  </>\n);\n","import React, { Component, Fragment } from 'react';\nimport shortid from 'shortid';\nimport { ContactForm } from './contactForm/ContactForm';\nimport { ContactList } from './contactList/ContactList';\n\nconst contactId = shortid.generate();\n\nexport class Phonebook extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contactsInLocalStorage = localStorage.getItem('contactsState');\n    const contactsInState = localStorage.getItem('contactsPrevState');\n    if (contactsInLocalStorage || contactsInState) {\n      const contactsState = JSON.parse(contactsInLocalStorage);\n      this.setState({ contacts: contactsState });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\n        'contactsState',\n        JSON.stringify(this.state.contacts),\n      );\n      localStorage.setItem(\n        'contactsPrevState',\n        JSON.stringify(prevState.contacts),\n      );\n    }\n  }\n\n  addContact = contact => {\n    const contactToAdd = {\n      ...contact,\n      id: shortid.generate(),\n    };\n\n    let isUniqueName = true;\n    this.state.contacts.forEach(contact => {\n      if (contact.name.includes(contactToAdd.name)) {\n        isUniqueName = false;\n        return alert(`${contactToAdd.name} is already in contacts.`);\n      } else {\n        isUniqueName = true;\n      }\n    });\n\n    isUniqueName &&\n      this.setState(prevState => {\n        return {\n          contacts: [...prevState.contacts, contactToAdd],\n        };\n      });\n  };\n\n  deleteContact = id => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(contact => contact.id !== id),\n      };\n    });\n  };\n\n  changeFilter = evt => {\n    this.setState({ filter: evt.target.value });\n  };\n\n  filterForContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    return (\n      <Fragment>\n        <ContactForm id={contactId} onAddContact={this.addContact} />\n        <ContactList\n          length={contacts.length}\n          contacts={this.filterForContacts()}\n          value={filter}\n          onDeleteContact={this.deleteContact}\n          onChangeFilter={this.changeFilter}\n        />\n      </Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport { Phonebook } from './components/Phonebook/Phonebook';\n\nexport function App() {\n  return <Phonebook />;\n}\n// propTypes, и где необходимо, defaultProps\n// хранение контактов телефонной книги в localStorage. Используй методы жизненного цикла:\n// При добавлении и удалении контакта, контакты сохраняются в локальное хранилище.\n// При загрузке приложения, контакты, если таковые есть, считываются из локального хранилища и записываются в состояние.\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}